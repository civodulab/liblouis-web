{
  "_args": [
    [
      {
        "raw": "liblouis-js@git+https://git@github.com/liblouis/liblouis-js.git",
        "scope": null,
        "escapedName": "liblouis-js",
        "name": "liblouis-js",
        "rawSpec": "git+https://git@github.com/liblouis/liblouis-js.git",
        "spec": "git+https://git@github.com/liblouis/liblouis-js.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:liblouis/liblouis-js.git",
          "sshUrl": "git+ssh://git@github.com/liblouis/liblouis-js.git",
          "httpsUrl": "git+https://git@github.com/liblouis/liblouis-js.git",
          "gitUrl": "git://git@github.com/liblouis/liblouis-js.git",
          "shortcut": "github:liblouis/liblouis-js",
          "directUrl": "https://git@raw.githubusercontent.com/liblouis/liblouis-js/master/package.json"
        }
      },
      "C:\\Users\\Reiner\\Desktop\\liblouis-online"
    ]
  ],
  "_from": "git+https://git@github.com/liblouis/liblouis-js.git",
  "_id": "liblouis@0.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/liblouis",
  "_phantomChildren": {},
  "_requested": {
    "raw": "liblouis-js@git+https://git@github.com/liblouis/liblouis-js.git",
    "scope": null,
    "escapedName": "liblouis-js",
    "name": "liblouis-js",
    "rawSpec": "git+https://git@github.com/liblouis/liblouis-js.git",
    "spec": "git+https://git@github.com/liblouis/liblouis-js.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:liblouis/liblouis-js.git",
      "sshUrl": "git+ssh://git@github.com/liblouis/liblouis-js.git",
      "httpsUrl": "git+https://git@github.com/liblouis/liblouis-js.git",
      "gitUrl": "git://git@github.com/liblouis/liblouis-js.git",
      "shortcut": "github:liblouis/liblouis-js",
      "directUrl": "https://git@raw.githubusercontent.com/liblouis/liblouis-js/master/package.json"
    }
  },
  "_requiredBy": [],
  "_resolved": "git+https://git@github.com/liblouis/liblouis-js.git#41978c1ccd20da606044158690a6d00ec76ec9b0",
  "_shasum": "911824b6315c33db3f8ccccadd453fad8b2f21f7",
  "_shrinkwrap": null,
  "_spec": "liblouis-js@git+https://git@github.com/liblouis/liblouis-js.git",
  "_where": "C:\\Users\\Reiner\\Desktop\\liblouis-online",
  "author": {
    "name": "Reiner Dolp"
  },
  "bugs": {
    "url": "https://github.com/liblouis/liblouis-js/issues"
  },
  "dependencies": {
    "liblouis-build": "*"
  },
  "description": "javascript bindings for liblouis",
  "devDependencies": {},
  "gitHead": "41978c1ccd20da606044158690a6d00ec76ec9b0",
  "homepage": "https://github.com/liblouis/liblouis-js#readme",
  "keywords": [
    "braille",
    "transcription"
  ],
  "license": "GPL-3.0",
  "main": "./liblouis.js",
  "name": "liblouis",
  "optionalDependencies": {},
  "readme": "These are \"javascript bindings\" to liblouis created by cross\ncompiling [liblouis](https://github.com/liblouis/liblouis) using\n[emscripten](http://emscripten.org/). The Liblouis API written in C can be directly called\nusing the [`ccall`](https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html#ccall) and \n[`cwrap`](https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html#cwrap)\nfunctions provided by emscripten. As directly calling the C API is cumbersome,\nan additional API — called Easy API — is provided for most functions. This package\nsupports NodeJS and browser environments.\n\n[![npm version](https://img.shields.io/npm/v/liblouis.svg?colorB=44cc11&label=Easy-API%20@npm)](https://www.npmjs.com/package/liblouis)\n[![Bower version](https://img.shields.io/bower/v/liblouis.svg?colorB=44cc11&label=Easy-API%20@bower)](https://bower.io/search/?q=liblouis)\n[![latest build in the npm registry](https://img.shields.io/npm/v/liblouis-build.svg?colorB=44cc11&label=Latest%20C-API%20Build%20@npm)](https://www.npmjs.com/package/liblouis-build)\n[![latest build in the bower registry](https://img.shields.io/bower/v/liblouis-build.svg?colorB=44cc11&label=Latest%20C-API%20Build%20@bower)](https://bower.io/search/?q=liblouis-build)\n\n[![build status of latest Easy-Api](https://img.shields.io/travis/liblouis/liblouis-js/master.svg?label=Build%20of%20Easy-API)](https://travis-ci.org/liblouis/liblouis-js)\n[![build status of latest C-Api](https://img.shields.io/travis/liblouis/js-build.svg?branch=master&label=Build%20of%20C-API)](https://travis-ci.org/liblouis/liblouis-js)\n\n---\n\n<p align=center><strong>Table of Contents</strong></p>\n\n1. [API Overview](#api-overview)\n\t1. [Installation](#installation)\n\t2. [List of Available Liblouis Functions](#list-of-available-liblouis-functions)\n\t3. [Compiling the Latest Version of Liblouis](#compiling-the-latest-version-of-liblouis)\n2. [Usage Examples](#usage-examples)\n\t1. [Printing the Version Number Using the Easy API in the Browser](#printing-the-version-number-using-the-easy-api-in-the-browser)\n\t2. [Printing the Version Number By Directly Calling Liblouis in the Browser](#printing-the-version-number-by-directly-calling-liblouis-in-the-browser)\n\t3. [Printing the Version Number Using the Easy API in NodeJS](#printing-the-version-number-using-the-easy-api-in-nodejs)\n\t4. [Translating and Back-Translating a String Using the Easy API](#translating-and-back-translating-a-string-using-the-easy-api)\n\t5. [Altering a Table Definition on Run-Time](#altering-a-table-definition-on-run-time)\n\t6. [Downloading Table Files on Demand in the Browser](#downloading-table-files-on-demand-in-the-browser)\n\t7. [Loading Table Files From Disk in NodeJS](#loading-table-files-from-disk-in-nodejs)\n\t8. [Dropping the Path Prefix of Bundled Tables](#dropping-the-path-prefix-of-bundled-tables)\n\t9. [Debugging and Adjusting the Log Level](#debugging-and-adjusting-the-log-level)\n\t10. [Persisting Log Files in NodeJS using Deprecated Liblouis Log Functions](#persisting-log-files-in-nodejs-using-deprecated-liblouis-log-functions)\n\t11. [Usage with Typescript](#usage-with-typescript)\n\t12. [Switching between Builds](#switching-between-builds)\n3. [Changelog](#changelog)\n4. [Licensing](#licensing)\n\n---\n\n# API Overview\n\n### Installation\n\n#### With NPM\n\n```\nnpm install liblouis\n```\n\nThis will install the latest available stable release version of liblouis' C-API and is \nequivalent to an installation with:\n\n```\nnpm install liblouis-build@latest\nnpm install liblouis\n```\n\nIf you want to fetch a specific version of the C-API, for example version\n`3.1.0`, you can use the following commands:\n\n```\nnpm install liblouis-build@3.1.0\nnpm install liblouis\n```\n\nIf you want to install the latest available development version of liblouis' C-API execute:\n\n```\nnpm install liblouis/js-build\nnpm install liblouis\n```\n\nIf you want to install a specific development version of liblouis' C-API, you can\nspecify the commit hash:\n\n```\nnpm install liblouis/js-build#commit-4b4c025\nnpm install liblouis\n```\n\nYou have to specify *exactly* 7 digits of the commit hash. Some commits won't\nhave a prebuilt binary available. In this case [you can build liblouis yourself](#compiling-the-latest-version-of-liblouis).\n\n**Warning:** While the programatic interface of `liblouis-build` adheres to the\nsemantic versioning specification, table files do not. You should refrain from\nadding `liblouis-build` as dependency with a version range if you are using\nliblouis with custom table files.\n\n### List of Available Liblouis Functions\n\n| Method           | Easy API | Direct Call API |\n|------------------|--------------|-------------|\n| `lou_version` | ✔ | ✔ |\n| `lou_translateString` | ✔\\* | ✔ |\n| `lou_translate` | ✖ | ✔ |\n| `lou_backTranslateString` | ✔\\* | ✔ |\n| `lou_backTranslate` | ✖ | ✔ |\n| `lou_hyphenate` | ✖ | ✔ |\n| `lou_compileString` | ✔ | ✔ |\n| `lou_getTypeformForEmphClass` | ✖ | ✔ |\n| `lou_dotsToChar` | ✖ | ✔ |\n| `lou_charToDots` | ✖ | ✔ |\n| `lou_registerLogCallback` | ✔ | ✔ |\n| `lou_setLogLevel` | ✔ | ✔ |\n| `lou_logFile` | ✖\\*\\* | ✔ |\n| `lou_logPrint` | ✖\\*\\* | ✔ |\n| `lou_logEnd` | ✖\\*\\* | ✔ |\n| `lou_setDataPath` | ✔ | ✔ |\n| `lou_getDataPath` | ✔ | ✔ |\n| `lou_getTable` | ✔ | ✔ |\n| `lou_checkTable` | ✔ | ✔ |\n| `lou_readCharFromFile` | ✖ | ✔ |\n| `lou_free` | ✔ | ✔ |\n| `lou_charSize` | ✔ | ✔ |\n\n\\* only [BMP](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane) tested\n\n\\*\\* `lou_logPrint`, `lou_logFile` and `lou_logEnd` will not be implemented as\nthey are deprecated.\n\n### Compiling the Latest Version of Liblouis\n\n```shell\n# obtain the latest version\ngit clone https://github.com/liblouis/liblouis.git\ncd liblouis\n\n# build\n./autogen.sh\nemconfigure ./configure --disable-shared\nemmake make\n\nemcc ./liblouis/.libs/liblouis.a -s RESERVED_FUNCTION_POINTERS=1 -s MODULARIZE=1\\\n\t -s EXPORT_NAME=\"'liblouisBuild'\" -s EXTRA_EXPORTED_RUNTIME_METHODS=\"['FS',\\\n\t'Runtime', 'stringToUTF16', 'Pointer_Stringify']\" --pre-js ./liblouis-js/inc/pre.js\\\n\t --post-js ./liblouis-js/inc/post.js -o build-no-tables.js\n\ncat ./inc/append.js >> build-no-tables.js\n```\n\nIn liblouis versions prior to release 3.2.0, you have to list all exported API\nfunctions:\n\n```shell\nemcc ./liblouis/.libs/liblouis.a -s RESERVED_FUNCTION_POINTERS=1 -s MODULARIZE=1\\\n\t -s EXPORTED_FUNCTIONS=\"['_lou_version', '_lou_translateString', '_lou_translate',\\\n\t'_lou_backTranslateString', '_lou_backTranslate', '_lou_hyphenate',\\\n\t'_lou_compileString', '_lou_getTypeformForEmphClass', '_lou_dotsToChar',\\\n\t'_lou_charToDots', '_lou_registerLogCallback', '_lou_setLogLevel',\\\n\t'_lou_logFile', '_lou_logPrint', '_lou_logEnd', '_lou_setDataPath',\\\n\t'_lou_getDataPath', '_lou_getTable', '_lou_checkTable',\\\n\t'_lou_readCharFromFile', '_lou_free', '_lou_charSize']\"\\\n\t -s EXPORT_NAME=\"'liblouisBuild'\" -s EXTRA_EXPORTED_RUNTIME_METHODS=\"['FS',\\\n\t'Runtime', 'stringToUTF16', 'Pointer_Stringify']\" --pre-js ./liblouis-js/inc/pre.js\\\n\t --post-js ./liblouis-js/inc/post.js -o build-no-tables.js\n```\n\nTo include a list of table files or a directory containing table files use the [`--embed-file`\nflag](https://kripken.github.io/emscripten-site/docs/porting/files/packaging_files.html#packaging-using-emcc).\nFor example, to embed all tables in a subfolder called `tables` add `--embed-file tables`, to embed\nall tables in the virtual filesystem root add `--embed-file tables@/`.\n\nIf you build liblouis for 32-bit Unicode, execute configure with\n`--enable-ucs4` and subsitute `stringToUTF16` with `stringToUTF32`.\n\n# Usage Examples\n\n### Printing the Version Number Using the Easy API in the Browser\n\nInclude a liblouis build first and the Easy-API second.\n\n```js\n<!doctype html>\n\n<!-- use your package manager to obtain these files: `build-no-tables.js`\n     is part of the package `liblouis-build`, `easy-api.js` is the main\n     file of the `liblouis-js` package. -->\n\n<script src=\"build-no-tables.js\"></script>\n<script src=\"easy-api.js\"></script>\n\n<script>\nconsole.info(\"Liblouis Version:\", liblouis.version());\n// Should print:\n// Liblouis Version: 3.1.0\n</script>\n```\n\n### Printing the Version Number By Directly Calling Liblouis in the Browser\n\nYou can include any liblouis build for this example.\n\n```js\n<!doctype html>\n\n<script src=\"build-no-tables.js\"></script>\n\n<script>\nconsole.info(\"Liblouis Version:\", liblouisBuild.ccall(\"lou_version\", \"string\"));\n// Should print:\n// Liblouis Version: 3.1.0\n</script>\n```\n\n### Printing the Version Number Using the Easy API in NodeJS\n\nUsing `require` includes the Easy API, liblouis without tables and mounts the\n`tables` folder as `tables`.\n\n```js\nconst liblouis = require(\"liblouis\");\n\nconsole.info(\"Liblouis Version using Easy API:\", liblouis.version());\n// Should print:\n// Liblouis Version using Easy API: 3.1.0\n</script>\n```\n\n### Translating and Back-Translating a String Using the Easy API\n\n```js\nvar unicode_braille = liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\")\n// Variable should contain:\n// ⠼⠁⠚ ⠵⠊⠑⠛⠑⠝\nconsole.log(liblouis.backTranslateString(\"tables/unicode.dis,tables/de-de-g0.utb\", unicode_braille))\n// Should print:\n// 10 ziegen\n```\n\n### Altering a Table Definition on Run-Time\n\n```js\nconsole.log(liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"1\"));\n// Logs: ⠼⠁\nliblouis.compileString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"numsign 123456\");\nconsole.log(liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"1\"));\n// Logs: ⠿⠁\n```\n\n### Downloading Table Files on Demand in the Browser\n\nAfter including a build without a bundled table folder and the Easy-API call\n`enableOnDemandTableLoading` with an absolute or relative URL to the table\ndirectory:\n\n```js\n// enable and set base url for tables\nliblouis.enableOnDemandTableLoading(\"tables/\");\n\n// call any API (direct call API or easy API) method:\nvar unicode_braille = liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\")\n// Makes 12 XHR-Requests for table files. The variable should contain the same\n// content as above:\n// ⠼⠁⠚ ⠵⠊⠑⠛⠑⠝\n```\n\nNote that you have to run liblouis in a worker thread for\n`enableOnDemandTableLoading` to work [1].\n\nYou should call `enableOnDemandTableLoading` only once on initialization.\nChanging the table folder location during execution causes the filesystem to be\ninconsistent. If you have to change the folder location, reload the whole\nliblouis/emscripten instance.\n\n### Loading Table Files from Disk in NodeJS\n\nIn NodeJS environments, `liblouis-js` automatically tries to load the `tables/`\nfolder from disk if your built does not already bundle table files.\n\nIf you do not want to load tables from disk, you can disable this feature\nby calling:\n\n```js\nliblouis.disableOnDemandTableLoading();\n```\n\nOr if you want to change the location of the table folder, simply call:\n\n```js\nliblouis.enableOnDemandTableLoading(tableFolderPath);\n```\n\nProviding `null` will reset the path to the original folder location.\n`enableOnDemandTableLoading` file not free tables that were already compiled by\nliblouis automatically. You have to call `liblouis.free` yourself if you\nwant liblouis to reload table files.\n\n\n### Debugging and Adjusting the Log Level\n\nThe available log levels are [listed in the liblouis\ndocumentation](http://liblouis.org/documentation/liblouis.html#lou_005fsetLogLevel).\nThe log level constants can be accessed using `liblouis.LOG[levelname]`. The\ndefault log level of liblouis is `liblouis.LOG.INFO`. The log messages of enabled\nlog levels are shown in the javascript console by default [2].\n\n```js\n// log everything including debug messages\nliblouis.setLogLevel(liblouis.LOG.ALL);\n\n// replace the default message handler\nliblouis.registerLogCallback(function(logLevel, msg){\n\t// logLevel is the constant associated with the log level.\n\t// you may obtain a string representation of the log level as follows:\n\tvar logLevelName = liblouis.LOG[logLevel];\n\n\t// you may check for a specific log level:\n\tif(logLevel === liblouis.LOG.DEBUG) {\n\t\tconsole.info(\"just recieved a debug message\");\n\t}\n\n\t// or alternatively using a string comparison:\n\tif(logLevelName === \"DEBUG\") {\n\t\tconsole.info(\"just recieved a debug message\");\n\t}\n\n\tconsole.log(logLevel, logLevelName, msg);\n\t// Example output:\n\t// 10000 \"DEBUG\" \"found table tables/de-de-g1.ctb\"\n});\n\n// remove the custom message handler and use the default message handler\nliblouis.registerLogCallback(null);\n```\n### Persisting Log Files in NodeJS using Deprecated Liblouis Log Functions\n\nThe following example creates a log file, that is persisted on the hard drive.\nNote that the functions of liblouis called below (`lou_logFile`, `lou_logPrint`\nand `lou_logEnd`) are all deprecated. The example only demonstrates how\nliblouis can be called directly from nodeJS. In production systems, you should\nconsider implementing your own log functionality using `registerLogCallback`.\n\n```js\nconst path = require('path');\nconst capi = require('liblouis-build');\nconst easyapi = require('liblouis');\neasyapi.setLiblouisBuild(capi);\n\n// map a directory on the machine to a virtual directory of emscripten:\nvar hdd_directory = path.resolve(__dirname, 'logs/');\n\nFS.mkdir('/logs');\nliblouis.getFilesystem().mount(NODEFS, { root: hdd_directory }, '/logs');\n\n// log all messages:\neasyapi.setLogLevel(easyapi.LOG.ALL);\n\n// enable liblouis' deprecated \"log to file\"-functionality:\ncapi.ccall('lou_logFile', 'void', ['string'], ['/logs/liblouis.txt']); \n\n// map the new log functionality of liblouis to the deprecated log\n// functionality:\neasyapi.registerLogCallback(function(i, str) {\n\tcapi.ccall('lou_logPrint', 'void', ['string'], [str]);\n});\n\n// do something that logs messages:\neasyapi.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\");\n\n// Example log file contents are now:\n// ----------------------------------\n\n// Performing translation: tableList=tables/unicode.dis,tables/de-de-g0.utb, inlen=38\n// Inbuf=0x0031 0x0030 0x0020 0x005A 0x0069 0x0065 0x0067 0x0065 0x006E 0x0000\n// 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000\n// 0x0000 0x0033 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000\n// 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 ~ 10 Ziegen\n// Cannot resolve table 'tables/unicode.dis'\n// 1 errors found.\n// tables/unicode.dis,tables/de-de-g0.utb could not be found\n```\n\nThe log file is created if it does not exist. If it exists, new log messages\nare appended to the end of the file.\n\n### Dropping the Path Prefix of Bundled Tables\n\n`liblouis.enableOnDemandTableLoading` lets you set the location of the table\nfolder if you are not bundling tables in the build's binary. If you want to\nchange the folder location inside the bundled virtual filesystem, you can use\nliblouis' `lou_setDataPath` as follows:\n\n```js\nconst PREFIX = \"/tables\";\n\nconst capi = require('liblouis-build');\nconst easyapi = require('liblouis');\nliblouis.setLiblouisBuild(capi);\n\ncapi.FS.mkdir(\"/liblouis\");\ncapi.FS.symlink(\"/tables\", \"/liblouis/tables\");\nliblouis.setDataPath(\"/\");\n```\n\n### Usage with Typescript\n\nThe easy api is typed and plays well with\n[typescript](https://www.typescriptlang.org) and [npm](https://www.npmjs.com/).\n\nAdd the library as dependency to your `package.json` using\n\n```\n$ npm install --save liblouis\n```\n\nand add the following line to each file that uses liblouis\n\n```js\n/// <reference types=\"liblouis\"/>\n```\n\n### Switching between Builds\n\nSwitching between builds is supported in nodeJS and the browser. The example\nbelow uses nodeJS:\n\n```js\nconst build_1 = require('liblouis-build/build-no-tables.js');\nconst build_2 = require('liblouis-build/build-tables-embeded.js');\n\n// In nodeJS, liblouis-js uses 'build-no-tables' by default, which is\n// included as build_1 above\nconst liblouis = require('liblouis');\n\n// use a liblouis build with embeded tables instead:\nliblouis.setLiblouisBuild(build_2);\n\n// switch back to the default liblouis build\nliblouis.setLiblouisBuild(build_1);\n```\n\nSettings like `registerLogCallback` are automatically applied to new build.\n\n# Changelog\n\n__Release 0.4.0:__ Removal of build switching `liblouis.setLiblouisBuild`\nbuild in favor of multiple concurrent instances of the Easy-API. Introduction\nof async Easy-API that automatically creates a worker thread; this allows\nyou to use on demand table loading effortlessly.\n\n*This release is backward compatible:* Liblouis builds for previous versions\ncan be used with liblouis-js `0.4.0`.\n\n__Release 0.3.0:__ `liblouis-js` no longer bundles a build of the liblouis\nC-API [3]. Builds were moved to their own npm and bower packages - this makes\nbuild switching and liblouis C-API selection easier; Adds support for on demand\ntable file loading in NodeJS; implements `lou_setDataPath` and `lou_getDataPath`.\n\n*This release is backward compatible:* Liblouis builds for version `0.2.x` can\nbe used with liblouis-js `0.3.0`.\n\n\n__Release 0.2.1:__ `liblouis-js` is now an official part of liblouis. The npm\nand bower packages were renamed to `liblouis`. This release updates package\nURLs from `reiner-dolp/liblouis-js` to `liblouis/liblouis-js`.\n\n__Release 0.2.0:__ Adding support for nodeJS (Issue #10, #11) and commonJS;\nAdding type definitions for Typescript; Updates liblouis to version `2c849bc`;\nRenaming easy api file to `easy-api.js`; Implements `lou_compileString`; Support\nfor build switching; Emscripten methods are no longer leaked to global scope.\n\n\n*This release is backward compatible:* Liblouis builds for version `0.1.0` can be\nused with liblouis-js `0.2.0`.\n\n\n__Release 0.1.0:__ Adding `libouis.setLogLevel` and `liblouis.registerLogCallback`;\nupdating liblouis builds to commit `db2a361`.\n\n__Release 0.0.3:__ Initial public release\n\n# Licensing\n\n[Emscripten is available under 2\nlicenses](https://github.com/kripken/emscripten/blob/master/LICENSE), the MIT\nlicense and the University of Illinois/NCSA Open Source License. [Liblouis is\nlicensed under\nLGPLv2.1+](https://raw.githubusercontent.com/liblouis/liblouis/master/README).\nNote that table files may have a different license. Licensing information can\nbe found in the header of the individual table files.\n\nCode that is not part of liblouis and not part of emscripten is licensed under\nGPL-3.0. The text of the license can be found in the file `LICENSE` of this\nrepository.\n\n<hr>\n\n__Footnotes__\n\n[1] Emscripten requires the files to be loaded synchroniously. Synchronous XHR,\nused to fetch the files, is deprecated in the main thread as it blocks all\nuser interaction.\n \n[2] Liblouis writes messages to stdout and stderr by default. Emscripten\nredirects these to `Module.print` and `Module.printErr`, which are implemented\nas: `function print(x) { console.log(x); }` and `function printErr(x) {\nconsole.warn(x); }`. There is no need to overwrite these functions. You can use\n`liblouis#registerLogCallback(int logLevel, string msg)`, which additionally\nexposes the log level. The Easy API registers a log callback by default, which\nmaps each message level to the correct `console` method, e.g. liblouis warning\nmessages to `console.warn` and liblouis fatal errors to `console.error`.\n\n[3] Before this change, liblouis and liblouis-js versions correspond as follows:\n`0.1.0 = 3.0.0 (db2a361)`, `0.2.0 = 3.1.0 (2c849bc)`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/liblouis/liblouis-js.git"
  },
  "scripts": {
    "test": "./testrunner/all.sh"
  },
  "types": "./liblouis.d.ts",
  "version": "0.3.0"
}
