{
  "_args": [
    [
      {
        "raw": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
        "spec": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:reiner-dolp/liblouis-js.git",
          "sshUrl": "git+ssh://git@github.com/reiner-dolp/liblouis-js.git",
          "httpsUrl": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
          "gitUrl": "git://git@github.com/reiner-dolp/liblouis-js.git",
          "shortcut": "github:reiner-dolp/liblouis-js",
          "directUrl": "https://git@raw.githubusercontent.com/reiner-dolp/liblouis-js/master/package.json"
        }
      },
      "C:\\Users\\Reiner\\Desktop\\liblouis-online"
    ]
  ],
  "_from": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
  "_id": "liblouis-js@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/liblouis-js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
    "spec": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:reiner-dolp/liblouis-js.git",
      "sshUrl": "git+ssh://git@github.com/reiner-dolp/liblouis-js.git",
      "httpsUrl": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
      "gitUrl": "git://git@github.com/reiner-dolp/liblouis-js.git",
      "shortcut": "github:reiner-dolp/liblouis-js",
      "directUrl": "https://git@raw.githubusercontent.com/reiner-dolp/liblouis-js/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://git@github.com/reiner-dolp/liblouis-js.git#7f2172c67225dd74f4a84a149112a25b5799ea1e",
  "_shasum": "682311d39bb9315b14ffffae92ba3518f75b92c2",
  "_shrinkwrap": null,
  "_spec": "git+https://git@github.com/reiner-dolp/liblouis-js.git",
  "_where": "C:\\Users\\Reiner\\Desktop\\liblouis-online",
  "author": {
    "name": "Reiner Dolp"
  },
  "bugs": {
    "url": "https://github.com/reiner-dolp/liblouis-js/issues"
  },
  "dependencies": {},
  "description": "javascript bindings for liblouis",
  "devDependencies": {},
  "gitHead": "7f2172c67225dd74f4a84a149112a25b5799ea1e",
  "homepage": "https://github.com/reiner-dolp/liblouis-js#readme",
  "keywords": [
    "braille",
    "transcription"
  ],
  "license": "GPL-3.0",
  "main": "./liblouis.js",
  "name": "liblouis-js",
  "optionalDependencies": {},
  "readme": "These are unoffical \"javascript bindings\" to liblouis created by cross\ncompiling [liblouis](https://github.com/liblouis/liblouis) using\n[emscripten](http://emscripten.org/). The official Liblouis API written in C can be directly called\nusing the [`ccall`](https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html#ccall) and \n[`cwrap`](https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html#cwrap)\nfunctions provided by emscripten. As directly calling the C API is cumbersome,\nan additional API — called Easy API — is provided for most functions. This package\nsupports NodeJS and browser environments.\n\n[![npm version](https://badge.fury.io/js/liblouis-js.svg)](https://www.npmjs.com/package/liblouis-js)\n[![Bower version](https://badge.fury.io/bo/liblouis-js.svg)](https://bower.io/search/?q=liblouis-js)\n\n---\n\n<p align=center><strong>Table of Contents</strong></p>\n\n1. [API Overview](#api-overview)\n\t1. [List of Builds Contained in This Repository](#list-of-builds-contained-in-this-repository)\n\t2. [List of Available Liblouis Functions](#list-of-available-liblouis-functions)\n\t3. [Compiling the Latest Version of Liblouis](#compiling-the-latest-version-of-liblouis)\n2. [Usage Examples](#usage-examples)\n\t1. [Printing the Version Number Using the Easy API in the Browser](#printing-the-version-number-using-the-easy-api-in-the-browser)\n\t2. [Printing the Version Number By Directly Calling Liblouis in the Browser](#printing-the-version-number-by-directly-calling-liblouis-in-the-browser)\n\t3. [Printing the Version Number Using the Easy API in NodeJS](#printing-the-version-number-using-the-easy-api-in-nodejs)\n\t4. [Translating and Back-Translating a String Using the Easy API](#translating-and-back-translating-a-string-using-the-easy-api)\n\t5. [Altering a Table Definition on Run-Time](#altering-a-table-definition-on-runtime)\n\t6. [Downloading Table Files on Demand](#downloading-table-files-on-demand)\n\t7. [Debugging and Adjusting the Log Level](#debugging-and-adjusting-the-log-level)\n\t8. [Persisting Log Files in NodeJS using Deprecated Liblouis Log Functions](#persisting-log-files-in-nodejs-using-deprecated-liblouis-log-functions)\n\t9. [Usage with Typescript](#usage-with-typescript)\n3. [Changelog](#changelog)\n3. [Licensing](#licensing)\n\n---\n\n# API Overview\n\n### List of Builds Contained in this repository\n\n| File             | Filesize | Description                | Version\\*                  |\n|------------------|----------|----------------------------|--------------------------|\n| `liblouis-tables-embeded.js`    | 29.8MB   | All tables embeded in file\\*\\* | commit db2a361 (> 3.0.0) |\n| `liblouis-no-tables.js`    | 1.47MB   | Tables not included\\*\\*\\* | commit db2a361 (> 3.0.0) |\n\n\\* shown is the commit's shortend hash of the liblouis version used to compile\nthe file. The comparison operator and version number are relative to the commit\ntagged with the given version, e.g.  `> 3.0.0` is to be read as *newer than the\ncommit tagged as version 3.0.0*.\n\\*\\* tables are available as `tables/{tablename}.{tableextension}`.\n\\*\\*\\* the `tables/` folder in this repository has version _commit db2a361 (>3.0.0)_\n\n\n### List of Available Liblouis Functions\n\n| Method           | Easy API | Direct Call API |\n|------------------|--------------|-------------|\n| `lou_version` | ✔ | ✔ |\n| `lou_translateString` | ✔\\* | ✔ |\n| `lou_translate` | ✖ | ✔ |\n| `lou_backTranslateString` | ✔\\* | ✔ |\n| `lou_backTranslate` | ✖ | ✔ |\n| `lou_hyphenate` | ✖ | ✔ |\n| `lou_compileString` | ✔ | ✔ |\n| `lou_getTypeformForEmphClass` | ✖ | ✔ |\n| `lou_dotsToChar` | ✖ | ✔ |\n| `lou_charToDots` | ✖ | ✔ |\n| `lou_registerLogCallback` | ✔ | ✔ |\n| `lou_setLogLevel` | ✔ | ✔ |\n| `lou_logFile` | ✖\\*\\* | ✔ |\n| `lou_logPrint` | ✖\\*\\* | ✔ |\n| `lou_logEnd` | ✖\\*\\* | ✔ |\n| `lou_setDataPath` | ✖ | ✔ |\n| `lou_getDataPath` | ✖ | ✔ |\n| `lou_getTable` | ✔ | ✔ |\n| `lou_checkTable` | ✔ | ✔ |\n| `lou_readCharFromFile` | ✖ | ✔ |\n| `lou_free` | ✔ | ✔ |\n| `lou_charSize` | ✔ | ✔ |\n\n\\* only [BMP](https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane) tested\n\n\\*\\* `lou_logPrint`, `lou_logFile` and `lou_logEnd` will not be implemented as\nthey are deprecated.\n\n### Compiling the Latest Version of Liblouis\n\n```\n# obtain the latest version\ngit clone https://github.com/liblouis/liblouis.git\ncd liblouis\n\n# build\n./autogen.sh\nemconfigure ./configure\nemmake make\n\nemcc liblouis/.libs/liblouis.so -s RESERVED_FUNCTION_POINTERS=1 -s\\\nEXPORTED_FUNCTIONS=\"['_lou_version', '_lou_translateString', '_lou_translate',\\\n'_lou_backTranslateString', '_lou_backTranslate', '_lou_hyphenate',\\\n'_lou_compileString', '_lou_getTypeformForEmphClass', '_lou_dotsToChar',\\\n'_lou_charToDots', '_lou_registerLogCallback', '_lou_setLogLevel',\\\n'_lou_logFile', '_lou_logPrint', '_lou_logEnd', '_lou_setDataPath',\\\n'_lou_getDataPath', '_lou_getTable', '_lou_checkTable',\\\n'_lou_readCharFromFile', '_lou_free', '_lou_charSize']\" --post-js ./inc/post.js -o liblouis.js\n```\n\nTo include a list of table files or a directory containing table files use the [`--embed-file`\nflag](https://kripken.github.io/emscripten-site/docs/porting/files/packaging_files.html#packaging-using-emcc).\n\n# Usage Examples\n\n### Printing the Version Number Using the Easy API in the Browser\n\nInclude one of the `liblouis-*.js` files first and `easy-api.js` second.\n\n```js\n<!doctype html>\n\n<script src=\"liblouis-no-tables.js\"></script>\n<script src=\"easy-api.js\"></script>\n\n<script>\nconsole.info(\"Liblouis Version:\", liblouis.version());\n// Should print:\n// Liblouis Version: 3.0.0\n</script>\n```\n\n### Printing the Version Number By Directly Calling Liblouis in the Browser\n\nInclude one of the `liblouis-*.js` files.\n\n```js\n<!doctype html>\n\n<script src=\"liblouis-no-tables.js\"></script>\n\n<script>\nconsole.info(\"Liblouis Version:\", Module.ccall(\"lou_version\", \"string\"));\n// Should print:\n// Liblouis Version: 3.0.0\n</script>\n```\n\n### Printing the Version Number Using the Easy API in NodeJS\n\nUsing `require` includes the Easy API, liblouis without tables and mounts the\n`tables` folder as `tables`.\n\n```js\nconst liblouis = require(\"liblouis\");\n\nconsole.info(\"Liblouis Version using Easy API:\", liblouis.version());\n// Should print:\n// Liblouis Version using Easy API: 3.0.0\n</script>\n```\n\n### Translating and Back-Translating a String Using the Easy API\n\n```js\nvar unicode_braille = liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\")\n// Variable should contain:\n// ⠼⠁⠚ ⠵⠊⠑⠛⠑⠝\nconsole.log(liblouis.backTranslateString(\"tables/unicode.dis,tables/de-de-g0.utb\", unicode_braille))\n// Should print:\n// 10 ziegen\n```\n\n### Altering a Table Definition on Run-Time\n\n```js\nconsole.log(liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"1\"));\n// Logs: ⠼⠁\nliblouis.compileString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"numsign 123456\");\nconsole.log(liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"1\"));\n// Logs: ⠿⠁\n```\n\n### Downloading Table Files on Demand\n\nAfter including `liblouis-no-tables.js` and `easy-api.js` call\n`enableOnDemandTableLoading` with an absolute or relative URL to the table\ndirectory:\n\n```js\n// enable and set base url for tables\nliblouis.enableOnDemandTableLoading(\"tables/\");\n\n// call any API (direct call API or easy API) method:\nvar unicode_braille = liblouis.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\")\n// Makes 12 XHR-Requests for table files. The variable should contain the same\n// content as above:\n// ⠼⠁⠚ ⠵⠊⠑⠛⠑⠝\n```\n\nNote that you have to run liblouis in a worker thread for\n`enableOnDemandTableLoading` to work [1].\n\n### Debugging and Adjusting the Log Level\n\nThe available log levels are [listed in the liblouis\ndocumentation](http://liblouis.org/documentation/liblouis.html#lou_005fsetLogLevel).\nThe log level constants can be accessed using `liblouis.LOG[levelname]`. The\ndefault log level of liblouis is `liblouis.LOG.INFO`. The log messages of enabled\nlog levels are shown in the javascript console by default [2].\n\n```js\n// log everything including debug messages\nliblouis.setLogLevel(liblouis.LOG.ALL);\n\n// replace the default message handler\nliblouis.registerLogCallback(function(logLevel, msg){\n\t// logLevel is the constant associated with the log level.\n\t// you may obtain a string representation of the log level as follows:\n\tvar logLevelName = liblouis.LOG[logLevel];\n\n\t// you may check for a specific log level:\n\tif(logLevel === liblouis.LOG.DEBUG) {\n\t\tconsole.info(\"just recieved a debug message\");\n\t}\n\n\t// or alternatively using a string comparison:\n\tif(logLevelName === \"DEBUG\") {\n\t\tconsole.info(\"just recieved a debug message\");\n\t}\n\n\tconsole.log(logLevel, logLevelName, msg);\n\t// Example output:\n\t// 10000 \"DEBUG\" \"found table tables/de-de-g1.ctb\"\n});\n\n// remove the custom message handler and use the default message handler\nliblouis.registerLogCallback(null);\n```\n### Persisting Log Files in NodeJS using Deprecated Liblouis Log Functions\n\nThe following example creates a log file, that is persisted on the hard drive.\nNote that the functions of liblouis called below (`lou_logFile`, `lou_logPrint`\nand `lou_logEnd`) are all deprecated. The example only demonstrates how\nliblouis can be called directly from nodeJS. In production systems, you should\nconsider implementing your own log functionality using `registerLogCallback`.\n\n```js\nconst path = require('path');\nconst capi = require('./liblouis-no-tables');\nconst easyapi = require('./easy-api');\neasyapi.setLiblouisBuild(capi);\n\n// map a directory on the machine to a virtual directory of emscripten:\nvar hdd_directory = path.resolve(__dirname, 'logs/');\n\nFS.mkdir('/logs');\nliblouis.getFilesystem().mount(NODEFS, { root: hdd_directory }, '/logs');\n\n// log all messages:\neasyapi.setLogLevel(easyapi.LOG.ALL);\n\n// enable liblouis' deprecated \"log to file\"-functionality:\ncapi.ccall('lou_logFile', 'void', ['string'], ['/logs/liblouis.txt']); \n\n// map the new log functionality of liblouis to the deprecated log\n// functionality:\neasyapi.registerLogCallback(function(i, str) {\n\tcapi.ccall('lou_logPrint', 'void', ['string'], [str]);\n});\n\n// do something that logs messages:\neasyapi.translateString(\"tables/unicode.dis,tables/de-de-g0.utb\", \"10 Ziegen\");\n\n// Example log file contents are now:\n// ----------------------------------\n\n// Performing translation: tableList=tables/unicode.dis,tables/de-de-g0.utb, inlen=38\n// Inbuf=0x0031 0x0030 0x0020 0x005A 0x0069 0x0065 0x0067 0x0065 0x006E 0x0000\n// 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000\n// 0x0000 0x0033 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000\n// 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 ~ 10 Ziegen\n// Cannot resolve table 'tables/unicode.dis'\n// 1 errors found.\n// tables/unicode.dis,tables/de-de-g0.utb could not be found\n```\n\nThe log file is created if it does not exist. If it exists, new log messages\nare appended to the end of the file.\n\n### Usage with Typescript\n\n__Upcoming in release 0.2.0.__\n\n### Switching between Builds\n\n__Upcoming in release 0.2.0.__ Switching between builds is supported in nodeJS\nand the browser. The example below uses nodeJS:\n\n```js\nconst build_1 = require('./liblouis-no-tables');\nconst build_2 = require('./liblouis-tables-embeded');\n\n// In nodeJS, liblouis-js uses 'liblouis-no-tables' by default, which is\n// included as build_1 above\nconst liblouis = require('liblouis');\n\n// use a liblouis build with embeded tables instead:\nliblouis.setLiblouisBuild(build_2);\n\n// switch back to the default liblouis build\nliblouis.setLiblouisBuild(build_1);\n```\n\nSettings like `registerLogCallback` are automatically applied to new build.\n\n# Changelog\n\n__Release 0.2.0:__ Adding support for nodeJS (Issue #10, #11) and commonJS;\nAdding type definitions for Typescript; Updating `./tables` folder to commit\n`db2a361` (Issue #12); Renaming easy api file to `easy-api.js`.\n\n__Release 0.1.0:__ Adding `libouis.setLogLevel` and `liblouis.registerLogCallback`;\nupdating liblouis builds to commit `db2a361`.\n\n__Release 0.0.3:__ Initial public release\n\n# Licensing\n\n[Emscripten is available under 2\nlicenses](https://github.com/kripken/emscripten/blob/master/LICENSE), the MIT\nlicense and the University of Illinois/NCSA Open Source License. [Liblouis is\nlicensed under\nLGPLv2.1+](https://raw.githubusercontent.com/liblouis/liblouis/master/README).\nNote that table files may have a different license. Licensing information can\nbe found in the header of the individual table files.\n\nCode that is not part of liblouis and not part of emscripten is licensed under\nGPL-3.0. The text of the license can be found in the file `LICENSE` of this\nrepository.\n\n<hr>\n\n__Footnotes__\n\n[1] Emscripten requires the files to be loaded synchroniously. Synchronous XHR,\nused to fetch the files, is deprecated in the main thread as it blocks all\nuser interaction.\n \n[2] Liblouis writes messages to stdout and stderr by default. Emscripten\nredirects these to `Module.print` and `Module.printErr`, which are implemented\nas: `function print(x) { console.log(x); }` and `function printErr(x) {\nconsole.warn(x); }`. There is no need to overwrite these functions. You can use\n`liblouis#registerLogCallback(int logLevel, string msg)`, which additionally\nexposes the log level. The Easy API registers a log callback by default, which\nmaps each message level to the correct `console` method, e.g. liblouis warning\nmessages to `console.warn` and liblouis fatal errors to `console.error`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/reiner-dolp/liblouis-js.git"
  },
  "version": "0.1.0"
}
